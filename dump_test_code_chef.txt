===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\apache2\files\default\tests\minitest\default_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'apache2::default' do
  include Helpers::Apache

  it 'installs apache' do
    package(node['apache']['package']).must_be_installed
  end

  it 'starts apache' do
    apache_service.must_be_running
  end

  it 'enables apache' do
    apache_service.must_be_enabled
  end

  it 'creates the conf.d directory' do
    directory("#{node['apache']['dir']}/conf.d").must_exist.with(:mode, '755')
  end

  it 'creates the logs directory' do
    directory(node['apache']['log_dir']).must_exist
  end

  it 'enables the default site unless it is disabled' do
    skip unless node['apache']['default_site_enabled']
    file("#{node['apache']['dir']}/sites-enabled/000-default").must_exist
    file("#{node['apache']['dir']}/sites-available/default").must_exist
  end

  it 'ensures the debian-style apache module scripts are present' do
    %w{a2ensite a2dissite a2enmod a2dismod}.each do |mod_script|
      file("/usr/sbin/#{mod_script}").must_exist
    end
  end

  it 'reports server name only, not detailed version info' do
    assert_match(/^ServerTokens #{node['apache']['servertokens']} *$/, File.read("#{node['apache']['dir']}/conf.d/security"))
  end

  it 'listens on port 80' do
    apache_configured_ports.must_include(80)
  end

  it 'only listens on port 443 when SSL is enabled' do
    unless ran_recipe?('apache2::mod_ssl')
      apache_configured_ports.wont_include(443)
    end
  end

  it 'reports server name only, not detailed version info' do
    file("#{node['apache']['dir']}/conf.d/security").must_match(/^ServerTokens #{node['apache']['servertokens']} *$/)
  end

  it 'enables default_modules' do
    node['apache']['default_modules'].each do |a2mod|
      apache_enabled_modules.must_include "#{a2mod}_module"
    end
  end

  describe 'centos' do
    it 'ensures no modules are loaded in conf.d' do
      Dir["#{node['apache']['dir']}/conf.d/*"].each do |f|
        file(f).wont_include 'LoadModule'
      end
    end
  end

  describe 'configuration' do
    it { config.must_include '# Generated by Chef' }
    it { config.must_include %Q{ServerRoot "#{node['apache']['dir']}"} }
    it { config.must_include "Include #{node['apache']['dir']}/conf.d/" }
    it { apache_config_parses? }
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\apache2\files\default\tests\minitest\god_monitor_test.rb
===========File Type===========
.rb
===========File Content===========
#
# Author:: Joshua Timberman <joshua@opscode.com>
# Copyright:: Copyright (c) 2012, Opscode, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require File.expand_path('../support/helpers', __FILE__)

describe 'apache2::god_monitor' do
  include Helpers::Apache

  it 'starts god service to supervise apache2' do
    service('god').must_be_running
  end

  it 'creates the god service template for apache' do
    file('/etc/god/conf.d/apache2.god').must_exist
  end

  it 'starts an apache2 service that works like a regular service' do
    # to be implemented when COOK-744 is fixed
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\apache2\files\default\tests\minitest\mod_apreq2_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'apache2::mod_apreq2' do
  include Helpers::Apache

  it 'enables apreq_module' do
    apache_enabled_modules.must_include 'apreq_module'
  end

  it 'symlinks the module on EL' do
    skip unless %w[rhel fedora].include?(node['platform_family'])
    libdir = node['kernel']['machine'] == 'x86_64' ? 'lib64' : 'lib'
    link(
      "/usr/#{libdir}/httpd/modules/mod_apreq.so"
    ).must_exist.with(
        :link_type, :symbolic).and(:to, "/usr/#{libdir}/httpd/modules/mod_apreq2.so"
        )
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\apache2\files\default\tests\minitest\mod_auth_cas_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'apache2::mod_auth_cas' do
  include Helpers::Apache

  it 'enables auth_cas_module' do
    skip if %w[rhel fedora].include?(node['platform_family']) && node['platform_version'].to_f > 6.0
    apache_enabled_modules.must_include 'auth_cas_module'
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\apache2\files\default\tests\minitest\mod_auth_openid_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)
require 'pathname'

describe 'apache2::mod_auth_openid' do
  include Helpers::Apache

  it 'installs the opekele library' do
    lib_dir = Pathname.new(node['apache']['lib_dir']).dirname.to_s
    file("#{lib_dir}/libopkele.so").must_exist
  end

  it 'does not add the module to httpd.conf' do
    conffile = case node['platform']
               when 'debian', 'ubuntu'
                 'apache2.conf'
               when 'redhat', 'centos', 'scientific', 'fedora', 'arch', 'amazon'
                 'conf/httpd.conf'
               when 'freebsd'
                 'httpd.conf'
               end
    httpd_config = File.read(File.join(node['apache']['dir'], conffile))
    refute_match /^LoadModule authopenid_module /, httpd_config
  end

  it 'creates a cache directory for the module' do
    directory(node['apache']['mod_auth_openid']['cache_dir']).must_exist.with(:owner, node['apache']['user'])
  end

  it 'ensures the db file is writable by apache' do
    file(node['apache']['mod_auth_openid']['dblocation']).must_exist.with(:owner, node['apache']['user']).and(:mode, '644')
  end

  it 'enables authopenid_module' do
    apache_enabled_modules.must_include 'authopenid_module'
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\apache2\files\default\tests\minitest\mod_cgi_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'apache2::mod_cgi' do
  include Helpers::Apache

  # the cgi module can be either cgi or cgid
  it 'enables cgi or cgid_module' do
    assert(apache_enabled_modules.include?('cgi_module') ||
      apache_enabled_modules.include?('cgid_module')
    )
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\apache2\files\default\tests\minitest\mod_dav_svn_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'apache2::mod_dav_svn' do
  include Helpers::Apache

  it 'enables dav_svn_module' do
    apache_enabled_modules.must_include('dav_svn_module')
  end

  it 'enables dav_module' do
    apache_enabled_modules.must_include('dav_module')
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\apache2\files\default\tests\minitest\mod_fastcgi.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'apache2::mod_fastcgi' do
  include Helpers::Apache

  it 'enables fastcgi_module' do
    skip if %w{rhel fedora}.include?(node['platform_family'])
    apache_enabled_modules.must_include 'fastcgi_module'
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\apache2\files\default\tests\minitest\mod_include_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'apache2::mod_include' do
  include Helpers::Apache

  it 'enables include_module' do
    apache_enabled_modules.must_include 'include_module'
  end

  it 'drops off the include module configuration' do
    assert_match(/AddType text\/html .shtml/, File.read("#{node['apache']['dir']}/mods-enabled/include.conf"))
    assert_match(/AddOutputFilter INCLUDES .shtml/, File.read("#{node['apache']['dir']}/mods-enabled/include.conf"))
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\apache2\files\default\tests\minitest\mod_perl_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'apache2::mod_perl' do
  include Helpers::Apache

  it 'enables perl_module' do
    apache_enabled_modules.must_include('perl_module')
  end

  it 'installs the apache request library' do
    req_pkg = case node['platform']
              when 'debian', 'ubuntu' then 'libapache2-request-perl'
              else 'perl-libapreq2'
              end
    package(req_pkg).must_be_installed
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\apache2\files\default\tests\minitest\mod_php5_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'apache2::mod_php5' do
  include Helpers::Apache

  it 'enables php5_module' do
    apache_enabled_modules.must_include('php5_module')
  end

  it 'deletes the packaged php config if any' do
    file("#{node['apache']['dir']}/conf.d/php.conf").wont_exist
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\apache2\files\default\tests\minitest\mod_python_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'apache2::mod_python' do
  include Helpers::Apache

  it 'enables python_module' do
    apache_enabled_modules.must_include('python_module')
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\apache2\files\default\tests\minitest\mod_ssl_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'apache2::mod_ssl' do
  include Helpers::Apache

  it 'installs the mod_ssl package on RHEL distributions' do
    skip unless %w[rhel fedora].include?(node['platform_family'])
    package('mod_ssl').must_be_installed
  end

  it 'enables ssl_module' do
    apache_enabled_modules.must_include 'ssl_module'
  end

  it 'does not store SSL config in conf.d' do
    file("#{node['apache']['dir']}/conf.d/ssl.conf").wont_exist
  end

  it 'is configured to listen on port 443' do
    apache_configured_ports.must_include(443)
  end

  it 'configures SSLCiphersuit from an attribute' do
    assert_match(
      /^SSLCipherSuite #{node['apache']['mod_ssl']['cipher_suite']}$/,
      File.read("#{node['apache']['dir']}/mods-enabled/ssl.conf")
      )
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\apache2\files\default\tests\minitest\support\helpers.rb
===========File Type===========
.rb
===========File Content===========
module Helpers
  # MiniTest helpers
  module Apache
    require 'chef/mixin/shell_out'
    include Chef::Mixin::ShellOut
    include MiniTest::Chef::Assertions
    include MiniTest::Chef::Context
    include MiniTest::Chef::Resources

    def apache_config_parses?
      acp = shell_out("#{node['apache']['binary']} -t")
      acp.exitstatus == 0
    end

    def apache_configured_ports
      port_config = File.read("#{node['apache']['dir']}/ports.conf")
      port_config.scan(/^Listen ([0-9]+)/).flatten.map { |p| p.to_i }
    end

    def apache_enabled_modules
      apache_modules = shell_out("#{node['apache']['binary']} -M")
      apache_modules.send(
        if node['platform_family'] == 'rhel' && node['platform_version'].to_f < 6.0
          :stderr
        else
          :stdout
        end
      ).split.select! { |i| i =~ /_module$/ }
    end

    def apache_service
      service(
        case node['platform']
        when 'debian', 'ubuntu' then 'apache2'
        when 'freebsd' then 'apache22'
        else 'httpd'
        end
      )
    end

    def config
      file(
        case node['platform']
        when 'debian', 'ubuntu' then "#{node['apache']['dir']}/apache2.conf"
        when 'freebsd' then "#{node['apache']['dir']}/httpd.conf"
        else "#{node['apache']['dir']}/conf/httpd.conf"
        end
      )
    end

    def ran_recipe?(recipe)
      if Chef::VERSION < '11.0'
        seen_recipes = node.run_state[:seen_recipes]
        recipes = seen_recipes.keys.each { |i| i }
      else
        recipes = run_context.loaded_recipes
      end
      if recipes.empty? && Chef::Config[:solo]
        # If you have roles listed in your run list they are NOT expanded
        recipes = node.run_list.map { |item| item.name if item.type == :recipe }
      end
      recipes.include?(recipe)
    end
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\ceph\test\integration\aio\bats\ceph-running.bats
===========File Type===========
.bats
===========File Content===========
@test "ceph is running" {
  ceph -s | grep HEALTH
}

@test "ceph is healthy" {
  ceph -s | grep HEALTH_OK
}

@test "cephfs is mounted" {
  mount | grep 'type ceph'
}

@test "radosgw is running" {
  ps auxwww | grep radosg[w]
}

@test "apache is running and listening" {
  netstat -ln | grep -E '^\S+\s+\S+\s+\S+\s+\S+:80\s+'
}




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\lvm\test\fixtures\cookbooks\fake\metadata.rb
===========File Type===========
.rb
===========File Content===========
name             'fake'
maintainer       'Opscode, Inc.'
maintainer_email 'cookbooks@opscode.com'
license          'Apache 2.0'
description      'A fake cookbook to test lvm cookbook'
version          '0.1.0'

depends 'lvm'




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\lvm\test\fixtures\cookbooks\fake\libraries\helper.rb
===========File Type===========
.rb
===========File Content===========
#
# Cookbook Name:: fake
# Library:: helper
#
# Copyright (C) 2013 Opscode, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

module LvmTest
  # Helper definitions for lvmtest
  module Helper
    # Creates given loop devices
    #
    # @param devices [Integer] the devices to create
    #
    def self.create_loop_devices(devices)
      Array(devices).each do |device|
        num = device.slice(/\d+/)
        mk_vfile_cmd = "dd if=/dev/zero of=/vfile#{num} bs=1024 count=65536"
        Mixlib::ShellOut.new(mk_vfile_cmd).run_command.error!
        mk_loop_dev_cmd = "losetup #{device} /vfile#{num}"
        Mixlib::ShellOut.new(mk_loop_dev_cmd).run_command.error!
      end
    end

    # Removes the given loop devices
    #
    # @param devices [Array, String] list of loop devices to remove
    #
    def self.remove_loop_devices(devices)
      require 'fileutils'
      Array(devices).each do |device|
        Chef::Log.info "Removing loop device: #{device}"
        num = device.slice(/\d+/)
        Mixlib::ShellOut.new("losetup -d #{device}").run_command.error!
        FileUtils.rm_rf("/vfile#{num}")
      end
    end
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\lvm\test\fixtures\cookbooks\fake\recipes\create.rb
===========File Type===========
.rb
===========File Content===========
#
# Cookbook Name:: fake
# Recipe:: create
#
# Copyright (C) 2013 Opscode, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distribued on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# The test device to use
devices = [
  '/dev/loop0',
  '/dev/loop1',
  '/dev/loop2',
  '/dev/loop3',
  '/dev/loop4',
  '/dev/loop5',
  '/dev/loop6',
  '/dev/loop7'
]

# Creates the loop back device
LvmTest::Helper.create_loop_devices(devices)

# Creates the physical device

log 'Creating physical volume for test'
devices.each do |device|
  lvm_physical_volume device
end

# Verify that the create action is idempotent
lvm_physical_volume devices.first

# Creates the volume group
#
lvm_volume_group 'vg-data' do
  physical_volumes ['/dev/loop0', '/dev/loop1', '/dev/loop2', '/dev/loop3']

  logical_volume 'logs' do
    size        '10M'
    filesystem  'ext2'
    mount_point :location => '/mnt/logs', :options => 'noatime,nodiratime'
    stripes     2
  end

  logical_volume 'home' do
    size        '5M'
    filesystem  'ext2'
    mount_point '/mnt/home'
    stripes     1
    mirrors     2
  end
end

lvm_volume_group 'vg-test' do
  physical_volumes ['/dev/loop4', '/dev/loop5', '/dev/loop6', '/dev/loop7']
end

# Creates the logical volume
#
lvm_logical_volume 'test' do
  group       'vg-test'
  size        '50%VG'
  filesystem  'ext3'
  mount_point '/mnt/test'
end

# Creates a small logical volume
#
lvm_logical_volume 'small' do
  group       'vg-test'
  size        '2%VG'
  filesystem  'ext3'
  mount_point '/mnt/small'
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\lvm\test\integration\create\bats\verify_created.bats
===========File Type===========
.bats
===========File Content===========
#!/usr/bin/env bats

# On CentOS 5.9, most of the commands used here are not in PATH. So add them
# here.
export PATH=$PATH:/sbin:/usr/sbin

@test "creates the physical volumes" {
  pvs | grep /dev/loop0
  pvs | grep /dev/loop1
  pvs | grep /dev/loop2
  pvs | grep /dev/loop3
  pvs | grep /dev/loop4
}

@test "creates the volume group vg-data" {
  vgs | grep vg-data
}

@test "creates the logical volume logs on vg-data" {
  lvs | grep logs | grep vg-data
}

@test "logical volume logs is formatted as ext2 filesystem" {
  blkid /dev/mapper/vg--data-logs | grep "TYPE=\"ext2\""
}

@test "mounts the logical volume logs to /mnt/logs" {
  mountpoint /mnt/logs
  mount | grep /dev/mapper/vg--data-logs | grep /mnt/logs
}

@test "creates the logical volume home on vg-data" {
  lvs | grep home | grep vg-data
}

@test "logical volume home is formatted as ext2 filesystem" {
  blkid /dev/mapper/vg--data-home | grep "TYPE=\"ext2\""
}

@test "mounts the logical volume home to /mnt/home" {
  mountpoint /mnt/home
  mount | grep /dev/mapper/vg--data-home | grep /mnt/home
}

@test "creates the volume group vg-test" {
  vgs | grep vg-test
}

@test "creates the logical volume 'test' on 'vg-test'" {
  lvs | grep test | grep vg-test
}

@test "logical volume 'test' is formatted as 'ext3' filesystem" {
  blkid /dev/mapper/vg--test-test | grep "TYPE=\"ext3\""
}

@test "mounts the logical volume to /mnt/test" {
  mountpoint /mnt/test
  mount | grep /dev/mapper/vg--test-test | grep /mnt/test
}

@test "creates the logical volume 'small' on 'vg-test'" {
  lvs | grep small | grep vg-test
}

@test "logical volume 'test' is formatted as 'ext3' filesystem" {
  blkid /dev/mapper/vg--test-small | grep "TYPE=\"ext3\""
}

@test "mounts the logical volume to /mnt/small" {
  mountpoint /mnt/small
  mount | grep /dev/mapper/vg--test-small | grep /mnt/small
}

@test "creates the logical volume using 2% of the available vg extents" {
  vgsize="$(vgdisplay vg-test|awk '/Total PE/ {print $3}')"
  lvsize="$(lvdisplay /dev/mapper/vg--test-small|awk '/Current LE/ {print $3}')"
  vg2pct="$(( $vgsize/50 ))"
  [ "$lvsize" -ge "$vg2pct" ]
}




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\nodejs\test\integration\package\bats\package.bats
===========File Type===========
.bats
===========File Content===========
#!/usr/bin/env bats

@test "node should be in the path" {
  [ "$(command -v node)" ]
}

@test "npm should be in the path" {
  [ "$(command -v npm)" ]
}




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\nodejs\test\integration\source\bats\source.bats
===========File Type===========
.bats
===========File Content===========
#!/usr/bin/env bats

@test "node should be in the path" {
  [ "$(command -v node)" ]
}

@test "npm should be in the path" {
  [ "$(command -v npm)" ]
}




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\ntp\test\ntp\attributes_spec.rb
===========File Type===========
.rb
===========File Content===========
#
# Cookbook Name:: ntp
# Test:: attributes_spec
#
# Author:: Fletcher Nichol
# Author:: Eric G. Wolfe
#
# Copyright 2012, Fletcher Nichol
# Copyright 2012, Eric G. Wolfe
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
require File.join(File.dirname(__FILE__), %w{.. support spec_helper})
require 'chef/platform'

describe 'Ntp::Attributes::Default' do
  let(:attr_ns) { 'ntp' }

  before do
    @node = Chef::Node.new
    @node.consume_external_attrs(Mash.new(ohai_data), {})
    @node.from_file(File.join(File.dirname(__FILE__), %w{.. .. attributes default.rb}))
  end

  describe "for unknown platform" do
    let(:ohai_data) do
      { :platform => "unknown", :platform_version => '3.14' }
    end

    it "sets the /var/lib directory" do
      @node[attr_ns]['varlibdir'].must_equal "/var/lib/ntp"
    end

    it "sets the driftfile to ntp.drift" do
      @node[attr_ns]['driftfile'].must_equal "/var/lib/ntp/ntp.drift"
    end

    it "sets the stats directory to /var/log/ntpstats/" do
      @node[attr_ns]['statsdir'].must_equal "/var/log/ntpstats/"
    end

    it "sets a packages list" do
      @node[attr_ns]['packages'].sort.must_equal %w{ ntp ntpdate }.sort
    end

    it "sets the service name to ntp" do
      @node[attr_ns]['service'].must_equal "ntp"
    end

    it "sets the conf_group to root" do
      @node[attr_ns]['conf_owner'].must_equal "root"
    end

    it "sets the conf_group to root" do
      @node[attr_ns]['conf_group'].must_equal "root"
    end

    it "sets the var_user to root" do
      @node[attr_ns]['var_owner'].must_equal "ntp"
    end

    it "sets the var_group to root" do
      @node[attr_ns]['var_group'].must_equal "ntp"
    end

    it "sets the upstream server list" do
      @node[attr_ns]['servers'].must_include "0.pool.ntp.org"
    end
  end

  describe "for centos 5 platform" do
    let(:ohai_data) do
      { :platform => "centos", :platform_version => '5.7' }
    end

    it "sets the service name to ntpd" do
      @node[attr_ns]['service'].must_equal "ntpd"
    end

    it "sets a packages list" do
      @node[attr_ns]['packages'].must_include "ntp"
    end
  end

  describe "for centos 6 platform" do
    let(:ohai_data) do
      { :platform => "centos", :platform_version => '6.2' }
    end

    it "sets the service name to ntpd" do
      @node[attr_ns]['service'].must_equal "ntpd"
    end

    it "sets a packages list" do
      @node[attr_ns]['packages'].sort.must_equal %w{ ntp ntpdate }.sort
    end
  end

  describe "for freebsd platform" do
    let(:ohai_data) do
      { :platform => "freebsd", :platform_version => '9.9' }
    end

    it "sets the service name to ntpd" do
      @node[attr_ns]['service'].must_equal "ntpd"
    end

    it "sets the drift file to ntpd.drift" do
      @node[attr_ns]['driftfile'].must_equal "/var/db/ntpd.drift"
    end

    it "sets the var directories to /var/db" do
      @node[attr_ns]['varlibdir'].must_equal "/var/db"
    end

    it "sets the stats directory to /var/db/ntpstats" do
      @node[attr_ns]['statsdir'].must_equal "/var/db/ntpstats"
    end

    it "sets the ntp packages to ntp" do
      @node[attr_ns]['packages'].must_include "ntp"
    end

    it "sets the conf_group to wheel" do
      @node[attr_ns]['conf_group'].must_equal "wheel"
    end

    it "sets the var_group to wheel" do
      @node[attr_ns]['var_group'].must_equal "wheel"
    end
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\ntp\test\support\spec_helper.rb
===========File Type===========
.rb
===========File Content===========
gem 'minitest'

require 'minitest/autorun'




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\ntp\files\default\tests\minitest\default_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'ntp::default' do

  include Helpers::Ntp

  it 'Starts the NTP daemon' do
    service(node['ntp']['service']).must_be_running
    service(node['ntp']['service']).must_be_enabled
  end

  it 'Creates the leapfile' do
    file(node['ntp']['leapfile']).must_exist.with(:owner, node['ntp']['conf_owner']).and(:group, node['ntp']['conf_group'])
  end

  it 'Creates the ntp.conf' do
    file('/etc/ntp.conf').must_exist.with(:owner, node['ntp']['conf_owner']).and(:group, node['ntp']['conf_group'])

    node['ntp']['servers'].each do |s|
      file('/etc/ntp.conf').must_include s
    end
  end

end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\ntp\files\default\tests\minitest\disable_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'ntp::disable' do

  include Helpers::Ntp

  it 'Disables the NTP daemon' do
    service(node['ntp']['service']).wont_be_running
    service(node['ntp']['service']).wont_be_enabled
  end

  it 'Creates the ntpdate conf file' do
    skip unless ["debian"].include? node['platform_family']

    if node['ntp']['ntpdate']['disable']
      file('/etc/default/ntpdate').must_include "exit 0"
    else
      file('/etc/default/ntpdate').wont_include "exit 0"
    end

    file('/etc/default/ntpdate').must_exist.with(
      :owner, node['ntp']['conf_owner']).and(
        :group, node['ntp']['conf_group'])
  end

end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\ntp\files\default\tests\minitest\ntpdate_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'ntp::ntpdate' do

  include Helpers::Ntp

  it 'Installs the ntpdate package' do
    skip unless ["debian"].include? node['platform_family']
    package("less").must_be_installed
  end

  it 'Creates the ntpdate conf file' do
    skip unless ["debian"].include? node['platform_family']

    if node['ntp']['ntpdate']['disable']
      file('/etc/default/ntpdate').must_include "exit 0"
    else
      file('/etc/default/ntpdate').wont_include "exit 0"
    end

    file('/etc/default/ntpdate').must_exist.with(
      :owner, node['ntp']['conf_owner']).and(
        :group, node['ntp']['conf_group'])
  end

end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\ntp\files\default\tests\minitest\undo_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'ntp::undo' do

  include Helpers::Ntp

  it 'Disables the NTP daemon' do
    service(node['ntp']['service']).wont_be_running
    service(node['ntp']['service']).wont_be_enabled
  end

  it 'Removes the NTP packages' do
    node['ntp']['packages'].each do |p|
      package(p).wont_be_installed
    end
  end

end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\ntp\files\default\tests\minitest\support\helpers.rb
===========File Type===========
.rb
===========File Content===========
module Helpers
  module Ntp
    include MiniTest::Chef::Assertions
    include MiniTest::Chef::Context
    include MiniTest::Chef::Resources
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\ntp\files\default\tests\minitest\default_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'ntp::default' do

  include Helpers::Ntp

  it 'Starts the NTP daemon' do
    service(node['ntp']['service']).must_be_running
    service(node['ntp']['service']).must_be_enabled
  end

  it 'Creates the leapfile' do
    file(node['ntp']['leapfile']).must_exist.with(:owner, node['ntp']['conf_owner']).and(:group, node['ntp']['conf_group'])
  end

  it 'Creates the ntp.conf' do
    file('/etc/ntp.conf').must_exist.with(:owner, node['ntp']['conf_owner']).and(:group, node['ntp']['conf_group'])

    node['ntp']['servers'].each do |s|
      file('/etc/ntp.conf').must_include s
    end
  end

end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\ntp\files\default\tests\minitest\disable_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'ntp::disable' do

  include Helpers::Ntp

  it 'Disables the NTP daemon' do
    service(node['ntp']['service']).wont_be_running
    service(node['ntp']['service']).wont_be_enabled
  end

  it 'Creates the ntpdate conf file' do
    skip unless ["debian"].include? node['platform_family']

    if node['ntp']['ntpdate']['disable']
      file('/etc/default/ntpdate').must_include "exit 0"
    else
      file('/etc/default/ntpdate').wont_include "exit 0"
    end

    file('/etc/default/ntpdate').must_exist.with(
      :owner, node['ntp']['conf_owner']).and(
        :group, node['ntp']['conf_group'])
  end

end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\ntp\files\default\tests\minitest\ntpdate_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'ntp::ntpdate' do

  include Helpers::Ntp

  it 'Installs the ntpdate package' do
    skip unless ["debian"].include? node['platform_family']
    package("less").must_be_installed
  end

  it 'Creates the ntpdate conf file' do
    skip unless ["debian"].include? node['platform_family']

    if node['ntp']['ntpdate']['disable']
      file('/etc/default/ntpdate').must_include "exit 0"
    else
      file('/etc/default/ntpdate').wont_include "exit 0"
    end

    file('/etc/default/ntpdate').must_exist.with(
      :owner, node['ntp']['conf_owner']).and(
        :group, node['ntp']['conf_group'])
  end

end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\ntp\files\default\tests\minitest\undo_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../support/helpers', __FILE__)

describe 'ntp::undo' do

  include Helpers::Ntp

  it 'Disables the NTP daemon' do
    service(node['ntp']['service']).wont_be_running
    service(node['ntp']['service']).wont_be_enabled
  end

  it 'Removes the NTP packages' do
    node['ntp']['packages'].each do |p|
      package(p).wont_be_installed
    end
  end

end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\ntp\files\default\tests\minitest\support\helpers.rb
===========File Type===========
.rb
===========File Content===========
module Helpers
  module Ntp
    include MiniTest::Chef::Assertions
    include MiniTest::Chef::Context
    include MiniTest::Chef::Resources
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\openssh\test\integration\default\bats\check_service.bats
===========File Type===========
.bats
===========File Content===========
@test 'check sshd service' {
  ps -ef | grep -v grep |grep sshd
}



===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\postgresql\files\default\tests\minitest\apt_pgdg_postgresql_test.rb
===========File Type===========
.rb
===========File Content===========
#
# Copyright 2012, Opscode, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require File.expand_path('../support/helpers', __FILE__)

describe 'postgresql::apt_pgdg_postgresql' do
  include Helpers::Postgresql

  it 'removes the Pitti PPA sources.list' do
    skip unless %w{debian}.include?(node['platform_family'])
    file("/etc/apt/sources.list.d/pitti-postgresql-ppa").wont_exist
  end
  it 'creates the PGDG apt sources.list' do
    skip unless %w{debian}.include?(node['platform_family'])
    file("/etc/apt/sources.list.d/apt.postgresql.org.list").must_exist
  end

  it 'installs postgresql-client-9.3' do
    package("postgresql-client-9.3").must_be_installed
  end

  it 'makes psql version 9.3 available' do
    psql = shell_out("psql --version")
    assert psql.stdout.include?("psql (PostgreSQL) 9.3")
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\postgresql\files\default\tests\minitest\default_test.rb
===========File Type===========
.rb
===========File Content===========
#
# Copyright 2012, Opscode, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require File.expand_path('../support/helpers', __FILE__)

describe 'postgresql::default' do
  include Helpers::Postgresql

  it 'installs the postgresql client packages' do
    node['postgresql']['client']['packages'].each do |pkg|
      package(pkg).must_be_installed
    end
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\postgresql\files\default\tests\minitest\ruby_test.rb
===========File Type===========
.rb
===========File Content===========
#
# Cookbook Name:: postgresql_test
# Recipe:: default
#
# Copyright 2012, Opscode, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require File.expand_path('../support/helpers', __FILE__)

describe 'postgresql::ruby' do
  include Helpers::Postgresql

  it 'installs the pg gem in Chefs ruby environment' do
    assert Gem::Specification.all_names.grep("pg-.*")
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\postgresql\files\default\tests\minitest\server_test.rb
===========File Type===========
.rb
===========File Content===========
#
# Copyright 2012, Opscode, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require File.expand_path('../support/helpers', __FILE__)

describe 'postgresql::server' do
  include Helpers::Postgresql

  it 'installs the postgresql server packages' do
    node['postgresql']['server']['packages'].each do |pkg|
      package(pkg).must_be_installed
    end
  end

  it 'runs the postgresql service' do
    service((node['postgresql']['server']['service_name'] || 'postgresql')).must_be_running
  end

  it 'can connect to postgresql' do
    require 'pg'
    conn = PG::Connection.new(
                               :host => 'localhost',
                               :port => '5432',
                               :password => node['postgresql']['password']['postgres'],
                               :user => "postgres"
                             )
    assert_match(/localhost/, conn.host)
  end

end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\postgresql\files\default\tests\minitest\support\helpers.rb
===========File Type===========
.rb
===========File Content===========
#
# Cookbook Name:: postgresql_test
# Recipe:: default
#
# Copyright 2012, Opscode, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

module Helpers
  module Postgresql
    require 'chef/mixin/shell_out'
    include Chef::Mixin::ShellOut
    include MiniTest::Chef::Assertions
    include MiniTest::Chef::Context
    include MiniTest::Chef::Resources

  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\sysctl\mysql\test\features\step_definitions\mysql_steps.rb
===========File Type===========
.rb
===========File Content===========
Given 'a new database server with some example data' do

end

When 'I delete a row from a database table' do
  delete_chef 'Alison Holst'
end

When 'I query the database' do
  select_tv_chefs
end

When 'I insert a new row into a database table' do
  insert_chef 'Ainsley Harriott'
end

When 'I update a row in a database table' do
  update_chef_name('Paula Deen', 'Paula Hiers Deen')
end

Then 'the expected data should be returned' do
  tv_chefs.must_equal(['Alison Holst', 'Nigella Lawson', 'Paula Deen'])
end

Then 'the inserted data should be returned for subsequent queries' do
  begin
    select_tv_chefs.must_include 'Ainsley Harriott'
  ensure
    delete_chef 'Ainsley Harriott'
  end
end

Then 'the deleted data should not be returned for subsequent queries' do
  begin
    select_tv_chefs.must_equal(['Nigella Lawson', 'Paula Deen'])
  ensure
    insert_chef 'Alison Holst'
  end
end

Then 'the updated data should be returned for subsequent queries' do
  begin
    select_tv_chefs.must_equal(['Alison Holst', 'Nigella Lawson', 'Paula Hiers Deen'])
  ensure
    update_chef_name('Paula Hiers Deen', 'Paula Deen')
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\sysctl\mysql\test\features\support\env.rb
===========File Type===========
.rb
===========File Content===========
require 'minitest/spec'
World(MiniTest::Assertions)
MiniTest::Spec.new(nil)




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\sysctl\mysql\test\features\support\mysql_helpers.rb
===========File Type===========
.rb
===========File Content===========
def query(sql)
  cmd_prefix = test_client_host ? "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@#{test_client_host}" : ''
  result = %x{echo "#{sql}" | #{cmd_prefix} mysql --host=#{test_server_host} --user=#{test_user} --password=#{test_password} --skip-column-names #{test_database}}
  assert $?.success?
  result
end
alias :insert :query
alias :update :query
alias :delete :query

def delete_chef(name)
  delete("DELETE FROM tv_chef WHERE name = '#{name}'")
end

def insert_chef(name)
  insert("INSERT INTO tv_chef (name) VALUES('#{name}')")
end

def select_tv_chefs
  @tv_chefs = query('SELECT name FROM tv_chef ORDER BY name').split("\n")
  @tv_chefs
end

def test_client_host
  ENV['TEST_CLIENT_HOST']
end

def test_database
  'mysql_test'
end

def test_server_host
  ENV['TEST_SERVER_HOST'] || 'localhost'
end

def test_password
  'neshFiapog'
end

def test_user
  'test_user'
end

def tv_chefs
  @tv_chefs
end

def update_chef_name(old_name, new_name)
  update("UPDATE tv_chef SET name = '#{new_name}' WHERE name = '#{old_name}'")
end





===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\sysctl\mysql\test\kitchen\cookbooks\mysql_test\metadata.rb
===========File Type===========
.rb
===========File Content===========
maintainer       "Andrew Crump"
maintainer_email "andrew@kotirisoftware.com"
license          "Apache 2.0"
description      "Acceptance tests for mysql"
long_description IO.read(File.join(File.dirname(__FILE__), 'README.md'))
version          "0.1.0"

depends          "database"
depends          "mysql"
depends          "yum"




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\sysctl\mysql\test\kitchen\cookbooks\mysql_test\attributes\default.rb
===========File Type===========
.rb
===========File Content===========
#
# Cookbook Name:: mysql_test
# Attributes:: default
#
# Copyright 2012, Opscode, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Must be specified for chef-solo for successful re-converge
override['mysql']['server_root_password'] = 'ebrilvOpCethHienRoj7'

default['mysql_test']['database'] = 'mysql_test'
default['mysql_test']['username'] = 'test_user'
default['mysql_test']['password'] = 'neshFiapog'

override['mysql']['bind_address'] = 'localhost'




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\sysctl\mysql\test\kitchen\cookbooks\mysql_test\recipes\client.rb
===========File Type===========
.rb
===========File Content===========
#
# Cookbook Name:: mysql_test
# Recipe:: client
#
# Copyright 2012, Opscode, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

include_recipe "yum::epel" if platform?('centos')




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\sysctl\mysql\test\kitchen\cookbooks\mysql_test\recipes\server.rb
===========File Type===========
.rb
===========File Content===========
#
# Cookbook Name:: mysql_test
# Recipe:: server
#
# Copyright 2012, Opscode, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

case node.platform
  when 'ubuntu'
    %w{mysql-client libmysqlclient-dev}
  when 'centos'
    %w{mysql mysql-devel}
end.each do |pkg|
  package pkg do
    action :nothing
  end.run_action(:install)
end

gem_package "mysql" do
  action :nothing
end.run_action(:install)

include_recipe "yum::epel" if platform?('centos')

file "/etc/sysconfig/network" do
  content "NETWORKING=yes"
  action :create_if_missing
  only_if { platform?('amazon', 'centos', 'fedora', 'redhat', 'scientific') }
end

include_recipe 'mysql::server'

mysql_connection = {:host => "localhost", :username => 'root',
                    :password => node['mysql']['server_root_password']}

mysql_database node['mysql_test']['database'] do
  connection mysql_connection
  action :create
end

mysql_database_user node['mysql_test']['username'] do
  connection mysql_connection
  password node['mysql_test']['password']
  database_name node['mysql_test']['database']
  host 'localhost'
  privileges [:select,:update,:insert, :delete]
  action [:create, :grant]
end

mysql_conn_args = "--user=root --password=#{node['mysql']['server_root_password']}"

execute 'create-sample-data' do
  command %Q{mysql #{mysql_conn_args} #{node['mysql_test']['database']} <<EOF
    CREATE TABLE tv_chef (name VARCHAR(32) PRIMARY KEY);
    INSERT INTO tv_chef (name) VALUES ('Alison Holst');
    INSERT INTO tv_chef (name) VALUES ('Nigella Lawson');
    INSERT INTO tv_chef (name) VALUES ('Paula Deen');
EOF}
  not_if "echo 'SELECT count(name) FROM tv_chef' | mysql #{mysql_conn_args} --skip-column-names #{node['mysql_test']['database']} | grep '^3$'"
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\sysctl\mysql\files\default\tests\minitest\helpers.rb
===========File Type===========
.rb
===========File Content===========
module Helpers
  module Mysql
    include MiniTest::Chef::Assertions
    include MiniTest::Chef::Context
    include MiniTest::Chef::Resources

    def assert_secure_password(type)
      node["mysql"]["server_#{type}_password"].length.must_be_close_to(20, 8)
    end
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\sysctl\mysql\files\default\tests\minitest\server_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../helpers', __FILE__)

describe 'mysql::server' do

  include Helpers::Mysql

  it 'has a secure operating system password' do
    assert_secure_password(:debian)
  end
  it 'has a secure root password' do
    assert_secure_password(:root)
  end
  it 'has a secure replication password' do
    assert_secure_password(:repl)
  end
  it 'installs the mysql package' do
    package(node['mysql']['package_name']).must_be_installed
  end
  it 'has a config directory' do
    directory(node['mysql']['confd_dir']).must_exist.with(:owner, 'mysql').and(:group, 'mysql')
  end
  it 'runs as a daemon' do
    service(node['mysql']['service_name']).must_be_running
  end
  it 'creates a my.cnf' do
    file("#{node['mysql']['conf_dir']}/my.cnf").must_exist
  end
  describe 'debian' do
    it 'creates a config file for service control' do
      skip unless ['debian', 'ubuntu'].include?(node[:platform])
      file("#{node['mysql']['conf_dir']}/debian.cnf").must_exist
    end
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\sysctl\mysql\files\default\tests\minitest\helpers.rb
===========File Type===========
.rb
===========File Content===========
module Helpers
  module Mysql
    include MiniTest::Chef::Assertions
    include MiniTest::Chef::Context
    include MiniTest::Chef::Resources

    def assert_secure_password(type)
      node["mysql"]["server_#{type}_password"].length.must_be_close_to(20, 8)
    end
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\sysctl\mysql\files\default\tests\minitest\server_test.rb
===========File Type===========
.rb
===========File Content===========
require File.expand_path('../helpers', __FILE__)

describe 'mysql::server' do

  include Helpers::Mysql

  it 'has a secure operating system password' do
    assert_secure_password(:debian)
  end
  it 'has a secure root password' do
    assert_secure_password(:root)
  end
  it 'has a secure replication password' do
    assert_secure_password(:repl)
  end
  it 'installs the mysql package' do
    package(node['mysql']['package_name']).must_be_installed
  end
  it 'has a config directory' do
    directory(node['mysql']['confd_dir']).must_exist.with(:owner, 'mysql').and(:group, 'mysql')
  end
  it 'runs as a daemon' do
    service(node['mysql']['service_name']).must_be_running
  end
  it 'creates a my.cnf' do
    file("#{node['mysql']['conf_dir']}/my.cnf").must_exist
  end
  describe 'debian' do
    it 'creates a config file for service control' do
      skip unless ['debian', 'ubuntu'].include?(node[:platform])
      file("#{node['mysql']['conf_dir']}/debian.cnf").must_exist
    end
  end
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\ceph\Rakefile
===========File Type===========

===========File Content===========
#!/usr/bin/env rake

# Style tests. Rubocop and Foodcritic
namespace :style do
  begin
    require 'rubocop/rake_task'
    desc 'Run Ruby style checks'
    RuboCop::RakeTask.new(:ruby)
  rescue LoadError
    puts '>>>>> Rubocop gem not loaded, omitting tasks' unless ENV['CI']
  end

  begin
    require 'foodcritic'

    desc 'Run Chef style checks'
    FoodCritic::Rake::LintTask.new(:chef) do |t|
      t.options = {
        fail_tags: ['any'],
        tags: ['~FC003'],
        chef_version: '11.6.0'
      }
    end
  rescue LoadError
    puts '>>>>> foodcritic gem not loaded, omitting tasks' unless ENV['CI']
  end
end

desc 'Run all style checks'
task style: ['style:chef', 'style:ruby']

# Integration tests. Kitchen.ci
namespace :integration do
  begin
    require 'kitchen/rake_tasks'

    desc 'Run kitchen integration tests'
    Kitchen::RakeTasks.new
  rescue LoadError
    puts '>>>>> Kitchen gem not loaded, omitting tasks' unless ENV['CI']
  end
end

desc 'Run all tests on Travis'
task travis: ['style']

# Default
task default: ['style', 'integration:kitchen:all']




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\nodejs\Rakefile
===========File Type===========

===========File Content===========
#!/usr/bin/env rake

@cookbook = "nodejs"

desc "Runs foodcritic linter"
task :foodcritic do
  if Gem::Version.new("1.9.2") <= Gem::Version.new(RUBY_VERSION.dup)
    sandbox = File.join(File.dirname(__FILE__), %w{tmp foodcritic}, @cookbook)
    prepare_foodcritic_sandbox(sandbox)

    sh "foodcritic --epic-fail any #{File.dirname(sandbox)}"
  else
    puts "WARN: foodcritic run is skipped as Ruby #{RUBY_VERSION} is < 1.9.2."
  end
end

task :default => 'foodcritic'

private

def prepare_foodcritic_sandbox(sandbox)
  files = %w{*.md *.rb attributes definitions files providers
recipes resources templates}

  rm_rf sandbox
  mkdir_p sandbox
  cp_r Dir.glob("{#{files.join(',')}}"), sandbox
  puts "\n\n"
end

begin
  require 'kitchen/rake_tasks'
  Kitchen::RakeTasks.new
rescue LoadError
  puts ">>>>> Kitchen gem not loaded, omitting tasks" unless ENV['CI']
end




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\ntp\Rakefile
===========File Type===========

===========File Content===========
#!/usr/bin/env rake
require 'tailor/rake_task'
require 'rspec/core/rake_task'
require 'foodcritic'

RSpec::Core::RakeTask.new(:spec)
desc "Runs rspec tests"
task :test => :spec

desc "Runs foodcritic linter"
task :foodcritic do
  if Gem::Version.new("1.9.2") <= Gem::Version.new(RUBY_VERSION.dup)
    FoodCritic::Rake::LintTask.new do |t|
      t.options = {:fail_tags => ['any']}
    end
  else
    puts "WARN: foodcritic run is skipped as Ruby #{RUBY_VERSION} is < 1.9.2."
  end
end

desc "Runs tailor against the cookbook."
task :tailor do
  Tailor::RakeTask.new
end

# Tailor before rspec so we don't tailor vendored cookbooks
task :default => ['tailor', 'test', 'foodcritic']




===========Repository Name===========
compass-adapters
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\compass-adapters\chef\cookbooks\python\Rakefile
===========File Type===========

===========File Content===========
require 'rspec/core/rake_task'

RSpec::Core::RakeTask.new(:spec)

task :default => :spec




===========Repository Name===========
cookbook-openstack-block-storage
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\cookbook-openstack-block-storage\Rakefile
===========File Type===========

===========File Content===========
task default: ['test']

task test: [:syntax, :lint, :unit]

desc 'Vendor the cookbooks in the Berksfile'
task :berks_prep do
  sh %(chef exec berks vendor)
end

desc 'Run FoodCritic (syntax) tests'
task :syntax do
  sh %(chef exec foodcritic --exclude spec -f any .)
end

desc 'Run RuboCop (lint) tests'
task :lint do
  sh %(chef exec cookstyle)
end

desc 'Run RSpec (unit) tests'
task unit: :berks_prep do
  sh %(chef exec rspec --format documentation)
end

desc 'Remove the berks-cookbooks directory and the Berksfile.lock'
task :clean do
  rm_rf [
    'berks-cookbooks',
    'Berksfile.lock',
  ]
end

desc 'All-in-One Neutron build Infra using Common task'
task :integration do
  # Use the common integration task
  sh %(wget -nv -t 3 -O Rakefile-Common https://raw.githubusercontent.com/openstack/cookbook-openstack-common/master/Rakefile)
  load './Rakefile-Common'
  Rake::Task['common_integration'].invoke
end




===========Repository Name===========
cookbook-openstack-common
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\cookbook-openstack-common\Rakefile
===========File Type===========

===========File Content===========
task default: ['test']

task test: [:syntax, :lint, :unit]

desc 'Vendor the cookbooks in the Berksfile'
task :berks_prep do
  sh %(chef exec berks vendor)
end

desc 'Run FoodCritic (syntax) tests'
task :syntax do
  sh %(chef exec foodcritic --exclude spec -f any .)
end

desc 'Run RuboCop (lint) tests'
task :lint do
  sh %(chef exec cookstyle)
end

desc 'Run RSpec (unit) tests'
task unit: :berks_prep do
  sh %(chef exec rspec --format documentation)
end

desc 'Remove the berks-cookbooks directory and the Berksfile.lock'
task :clean do
  rm_rf [
    'berks-cookbooks',
    'Berksfile.lock',
  ]
end

desc 'All-in-One Neutron build'
task integration: :common_integration do
  # Noop
end

desc 'Common task used by all cookbooks for integration test'
task :common_integration do
  # Use the berksfile support to make use of the existing patch clones.
  # Make a sym link from workspace/gate-cookbook-openstack-common-chef-rake-integration
  # to workspace/cookbook-openstack-common
  patch_dir = Dir.pwd
  patch_dir_berks = ENV['ZUUL_PROJECT'].split('/')[1]
  sh %(ls -la ..)
  sh %(ls -la ../..)
  sh %(sudo ln -s #{patch_dir} ../#{patch_dir_berks})

  unless Dir.exist?('../openstack-chef')
    sh %(git clone --depth 1 git://github.com/openstack/openstack-chef.git ../openstack-chef)
  end

  Dir.chdir('../openstack-chef') do
    sh %(chef exec rake integration)
  end
end




===========Repository Name===========
cookbook-openstack-compute
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\cookbook-openstack-compute\Rakefile
===========File Type===========

===========File Content===========
task default: ['test']

task test: [:syntax, :lint, :unit]

desc 'Vendor the cookbooks in the Berksfile'
task :berks_prep do
  sh %(chef exec berks vendor)
end

desc 'Run FoodCritic (syntax) tests'
task :syntax do
  sh %(chef exec foodcritic --exclude spec -f any .)
end

desc 'Run CookStyle (lint) tests'
task :lint do
  sh %(chef exec cookstyle)
end

desc 'Run RSpec (unit) tests'
task unit: :berks_prep do
  sh %(chef exec rspec --format documentation)
end

desc 'Remove the berks-cookbooks directory and the Berksfile.lock'
task :clean do
  rm_rf [
    'berks-cookbooks',
    'Berksfile.lock',
  ]
end

desc 'All-in-One Neutron build Infra using Common task'
task :integration do
  # Use the common integration task
  sh %(wget -nv -t 3 -O Rakefile-Common https://raw.githubusercontent.com/openstack/cookbook-openstack-common/master/Rakefile)
  load './Rakefile-Common'
  Rake::Task['common_integration'].invoke
end




===========Repository Name===========
cookbook-openstack-dashboard
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\cookbook-openstack-dashboard\Rakefile
===========File Type===========

===========File Content===========
task default: ['test']

task test: [:syntax, :lint, :unit]

desc 'Vendor the cookbooks in the Berksfile'
task :berks_prep do
  sh %(chef exec berks vendor)
end

desc 'Run FoodCritic (syntax) tests'
task :syntax do
  sh %(chef exec foodcritic --exclude spec -f any .)
end

desc 'Run RuboCop (lint) tests'
task :lint do
  sh %(chef exec cookstyle)
end

desc 'Run RSpec (unit) tests'
task unit: :berks_prep do
  sh %(chef exec rspec --format documentation)
end

desc 'Remove the berks-cookbooks directory and the Berksfile.lock'
task :clean do
  rm_rf [
    'berks-cookbooks',
    'Berksfile.lock',
  ]
end

desc 'All-in-One Neutron build Infra using Common task'
task :integration do
  # Use the common integration task
  sh %(wget -nv -t 3 -O Rakefile-Common https://raw.githubusercontent.com/openstack/cookbook-openstack-common/master/Rakefile)
  load './Rakefile-Common'
  Rake::Task['common_integration'].invoke
end




===========Repository Name===========
cookbook-openstack-identity
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\cookbook-openstack-identity\Rakefile
===========File Type===========

===========File Content===========
task default: ['test']

task test: [:syntax, :lint, :unit]

desc 'Vendor the cookbooks in the Berksfile'
task :berks_prep do
  sh %(chef exec berks vendor)
end

desc 'Run FoodCritic (syntax) tests'
task :syntax do
  sh %(chef exec foodcritic --exclude spec -f any .)
end

desc 'Run RuboCop (lint) tests'
task :lint do
  sh %(chef exec cookstyle)
end

desc 'Run RSpec (unit) tests'
task unit: :berks_prep do
  sh %(chef exec rspec --format documentation)
end

desc 'Remove the berks-cookbooks directory and the Berksfile.lock'
task :clean do
  rm_rf [
    'berks-cookbooks',
    'Berksfile.lock',
  ]
end

desc 'All-in-One Neutron build Infra using Common task'
task :integration do
  # Use the common integration task
  sh %(wget -nv -t 3 -O Rakefile-Common https://raw.githubusercontent.com/openstack/cookbook-openstack-common/master/Rakefile)
  load './Rakefile-Common'
  Rake::Task['common_integration'].invoke
end




===========Repository Name===========
cookbook-openstack-image
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\cookbook-openstack-image\Rakefile
===========File Type===========

===========File Content===========
task default: ['test']

task test: [:syntax, :lint, :unit]

desc 'Vendor the cookbooks in the Berksfile'
task :berks_prep do
  sh %(chef exec berks vendor)
end

desc 'Run FoodCritic (syntax) tests'
task :syntax do
  sh %(chef exec foodcritic --exclude spec -f any .)
end

desc 'Run RuboCop (lint) tests'
task :lint do
  sh %(chef exec cookstyle)
end

desc 'Run RSpec (unit) tests'
task unit: :berks_prep do
  sh %(chef exec rspec --format documentation)
end

desc 'Remove the berks-cookbooks directory and the Berksfile.lock'
task :clean do
  rm_rf [
    'berks-cookbooks',
    'Berksfile.lock',
  ]
end

desc 'All-in-One Neutron build Infra using Common task'
task :integration do
  # Use the common integration task
  sh %(wget -nv -t 3 -O Rakefile-Common https://raw.githubusercontent.com/openstack/cookbook-openstack-common/master/Rakefile)
  load './Rakefile-Common'
  Rake::Task['common_integration'].invoke
end




===========Repository Name===========
cookbook-openstack-network
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\cookbook-openstack-network\Rakefile
===========File Type===========

===========File Content===========
task default: ['test']

task test: [:syntax, :lint, :unit]

desc 'Vendor the cookbooks in the Berksfile'
task :berks_prep do
  sh %(chef exec berks vendor)
end

desc 'Run FoodCritic (syntax) tests'
task :syntax do
  sh %(chef exec foodcritic --exclude spec -f any .)
end

desc 'Run RuboCop (lint) tests'
task :lint do
  sh %(chef exec cookstyle)
end

desc 'Run RSpec (unit) tests'
task unit: :berks_prep do
  sh %(chef exec rspec --format documentation)
end

desc 'Remove the berks-cookbooks directory and the Berksfile.lock'
task :clean do
  rm_rf [
    'berks-cookbooks',
    'Berksfile.lock',
  ]
end

desc 'All-in-One Neutron build Infra using Common task'
task :integration do
  # Use the common integration task
  sh %(wget -nv -t 3 -O Rakefile-Common https://raw.githubusercontent.com/openstack/cookbook-openstack-common/master/Rakefile)
  load './Rakefile-Common'
  Rake::Task['common_integration'].invoke
end




===========Repository Name===========
cookbook-openstack-ops-database
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\cookbook-openstack-ops-database\Rakefile
===========File Type===========

===========File Content===========
task default: ["test"]

task test: [:syntax, :lint, :unit]

desc "Vendor the cookbooks in the Berksfile"
task :berks_prep do
  sh %(chef exec berks vendor)
end

desc "Run FoodCritic (syntax) tests"
task :syntax do
  sh %(chef exec foodcritic --exclude spec -f any .)
end

desc "Run RuboCop (lint) tests"
task :lint do
  sh %(chef exec cookstyle)
end

desc "Run RSpec (unit) tests"
task unit: :berks_prep do
  sh %(chef exec rspec --format documentation)
end

desc "Remove the berks-cookbooks directory and the Berksfile.lock"
task :clean do
  rm_rf [
    'berks-cookbooks',
    'Berksfile.lock',
  ]
end

desc "All-in-One Neutron build Infra using Common task"
task :integration do
  # Use the common integration task
  sh %(wget -nv -t 3 -O Rakefile-Common https://raw.githubusercontent.com/openstack/cookbook-openstack-common/master/Rakefile)
  load './Rakefile-Common'
  Rake::Task["common_integration"].invoke
end




===========Repository Name===========
cookbook-openstack-orchestration
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\cookbook-openstack-orchestration\Rakefile
===========File Type===========

===========File Content===========
task default: ['test']

task test: [:syntax, :lint, :unit]

desc 'Vendor the cookbooks in the Berksfile'
task :berks_prep do
  sh %(chef exec berks vendor)
end

desc 'Run FoodCritic (syntax) tests'
task :syntax do
  sh %(chef exec foodcritic --exclude spec -f any .)
end

desc 'Run RuboCop (lint) tests'
task :lint do
  sh %(chef exec cookstyle)
end

desc 'Run RSpec (unit) tests'
task unit: :berks_prep do
  sh %(chef exec rspec --format documentation)
end

desc 'Remove the berks-cookbooks directory and the Berksfile.lock'
task :clean do
  rm_rf [
    'berks-cookbooks',
    'Berksfile.lock',
  ]
end

desc 'All-in-One Neutron build Infra using Common task'
task :integration do
  # Use the common integration task
  sh %(wget -nv -t 3 -O Rakefile-Common https://raw.githubusercontent.com/openstack/cookbook-openstack-common/master/Rakefile)
  load './Rakefile-Common'
  Rake::Task['common_integration'].invoke
end




===========Repository Name===========
cookbook-openstack-telemetry
===========File Path===========
C:\Users\mehedi.md.hasan\PythonWorkspace\OSTK_CHEF\ostk-chef\cookbook-openstack-telemetry\Rakefile
===========File Type===========

===========File Content===========
task default: ['test']

task test: [:syntax, :lint, :unit]

desc 'Vendor the cookbooks in the Berksfile'
task :berks_prep do
  sh %(chef exec berks vendor)
end

desc 'Run FoodCritic (syntax) tests'
task :syntax do
  sh %(chef exec foodcritic --exclude spec -f any .)
end

desc 'Run RuboCop (lint) tests'
task :lint do
  sh %(chef exec cookstyle)
end

desc 'Run RSpec (unit) tests'
task unit: :berks_prep do
  sh %(chef exec rspec --format documentation)
end

desc 'Remove the berks-cookbooks directory and the Berksfile.lock'
task :clean do
  rm_rf [
    'berks-cookbooks',
    'Berksfile.lock',
  ]
end

desc 'All-in-One Neutron build Infra using Common task'
task :integration do
  # Use the common integration task
  sh %(wget -nv -t 3 -O Rakefile-Common https://raw.githubusercontent.com/openstack/cookbook-openstack-common/master/Rakefile)
  load './Rakefile-Common'
  Rake::Task['common_integration'].invoke
end




